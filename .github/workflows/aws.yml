# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to EC2 with Rollback, Email, and Log Upload

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 with rollback and capture logs
        id: deploy
        continue-on-error: true
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' << 'EOF'
          set -e
          cd /srv/app/F25-Team17

          LOGFILE=deploy_log_$(date +%Y%m%d_%H%M%S).log
          echo "Deployment started at $(date)" > $LOGFILE

          OLD_COMMIT=$(git rev-parse HEAD)
          echo "Previous commit: $OLD_COMMIT" >> $LOGFILE

          {
            sudo systemctl stop django
            git fetch origin main
            git reset --hard origin/main
            source venv/bin/activate
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic --noinput
            deactivate
            sudo systemctl restart django nginx
          } >> $LOGFILE 2>&1 || {
            echo "Deployment failed, rolling back..." >> $LOGFILE
            git reset --hard $OLD_COMMIT >> $LOGFILE 2>&1
            sudo systemctl restart django nginx >> $LOGFILE 2>&1
            echo "Rollback complete at $(date)" >> $LOGFILE
            exit 1
          }

          echo "Deployment successful at $(date)" >> $LOGFILE
          tail -n 15 $LOGFILE > /tmp/deploy_summary.log
          scp /tmp/deploy_summary.log github_runner:/tmp/deploy_summary.log || true
          scp $LOGFILE github_runner:/tmp/latest_deploy.log || true
          EOF

      - name: Upload Deployment Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: EC2-deploy-log
          path: /tmp/latest_deploy.log

      - name: Read summary log
        if: always()
        id: read_summary
        run: |
          if [ -f /tmp/deploy_summary.log ]; then
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            cat /tmp/deploy_summary.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "summary=No summary log available." >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ job.status == 'success' && '‚úÖ EC2 Deployment Succeeded ‚Äî F25-Team17' || '‚ùå EC2 Deployment Failed ‚Äî F25-Team17' }}
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: "GitHub Actions <${{ secrets.SMTP_USERNAME }}>"
          body: |
            **Deployment Status:** ${{ job.status }}
            **Repository:** ${{ github.repository }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref }}
            **Actor:** ${{ github.actor }}

            **Last 15 Lines of Deployment Log:**
            ```
            ${{ steps.read_summary.outputs.summary }}
            ```

            The full log is available under:
            üëâ GitHub Actions ‚Üí Artifacts ‚Üí EC2-deploy-log
